# Алгоритм сортировки слиянием рекурсивно разделяет список на половины, сортирует каждую из них и
# затем сливает отсортированные половины в один отсортированный список
def merge_sort(arr):
    """
    Реализует алгоритм сортировки слиянием для списка arr.

    :param arr: Список чисел для сортировки
    :return: Отсортированный список чисел
    """
    # Базовый случай: если список состоит из одного элемента или пустой, он уже отсортирован
    if len(arr) <= 1:
        return arr

    # 1. Разделяем список на две половины
    mid = len(arr) // 2  # Находим середину списка
    left_half = arr[:mid]  # Левая половина
    right_half = arr[mid:]  # Правая половина

    # 2. Рекурсивно применяем merge_sort к каждой половине
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    # 3. Сливаем две отсортированные половины
    return merge(left_sorted, right_sorted)


def merge(left, right):
    """
    Сливает два отсортированных списка в один отсортированный список.

    :param left: Отсортированный список
    :param right: Отсортированный список
    :return: Слитый отсортированный список
    """
    result = []  # Инициализируем пустой список для результата
    i = j = 0  # Индексы для левой и правой половин

    # 4. Сливаем элементы из двух списков в один, пока есть элементы в обоих списках
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:  # Сравниваем элементы из левой и правой половин
            result.append(left[i])  # Добавляем меньший элемент в результат
            i += 1  # Переходим к следующему элементу в левой половине
        else:
            result.append(right[j])  # Добавляем меньший элемент в результат
            j += 1  # Переходим к следующему элементу в правой половине

    # 5. Добавляем оставшиеся элементы из левой половины (если есть)
    while i < len(left):
        result.append(left[i])
        i += 1

    # 6. Добавляем оставшиеся элементы из правой половины (если есть)
    while j < len(right):
        result.append(right[j])
        j += 1

    return result  # Возвращаем слитый отсортированный список

# Пример использования
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort(arr)
print(f"Отсортированный список: {sorted_arr}")  # [3, 9, 10, 27, 38, 43, 82]